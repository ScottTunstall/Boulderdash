<HTML>
<HEAD><TITLE>Inside BoulderDash</TITLE></HEAD>
<BODY>

<H1>Inside BoulderDash</H1>
Inside this document:
<UL><LI><A HREF="#Demo data">Demo data</A>
<LI><A HREF="#Random numbers">Random numbers</A>
<LI><A HREF="#Strings">ASCII text strings</A>
<LI><A HREF="#Uncovering and covering the screen">Uncovering and covering the screen</A>
<LI><A HREF="#Timing info">Timing info</A>
<LI><A HREF="#Finishing caves and intermissions">Finishing caves and intermissions</A></UL>


<HR>
<H2><A NAME="Demo data">Demo data</A></H2>
This is the raw data used to play the &quot;demo&quot; that starts up after a certain amount of idle time on the splash screen. It's a recorded demo&#59; Rockford makes the same moves on the same cave (Cave A, 1).<P>

The format of the demo data is as follows. The low nybble of each byte indicates the direction that Rockford is to move ($0 = end of demo, $7 = Right, $B = Left, $D = Down, $E = Up, $F = no movement). The high nybble indicates the number of spaces (number of frames) to apply that movement. The demo finishes when it hits $00. So for example, $FF means no movement for 15 turns, $1E means move up one space, $77 means move right 7 spaces, etc.<P>

<PRE>FF FF 1E 77 2D 97 4F 2D 47 3E 1B 4F 1E B7 1D 27 
4F 6D 17 4D 3B 4F 1D 1B 47 3B 4F 4E 5B 3E 5B 4D 
3B 5F 3E AB 1E 3B 1D 6B 4D 17 4F 3D 47 4D 4B 2E 
27 3E A7 A7 1D 47 1D 47 2D 5F 57 4E 57 6F 1D 00</PRE>


<HR>
<H2><A NAME="Random numbers">Random numbers</A></H2>
There are two different random number generators used in BoulderDash I on the C64. One generates &quot;real&quot;, unpredictable random numbers using the CIA timers in the C64.These are used in all the places in the game where a random number is desired but predictability is not.<P>

The other is used to generate &quot;random&quot; numbers in a specific, repeatable sequence, used to generate cave data. This random number generator is written in assembly without reference to any hardware such as timers or the SID chip&#59; it's purely mathmatical manipulations to give a pseudo-random sequence. The reason is that this random number generator must not rely on any hardware is that this way it can be implemented on other computer types other than the C64 and still give the same sequence of random numbers (when seeded specifically) in order to give the same cave layout.<P>

BoulderDash I does not use the random number generator that is built into the SID chip in the C64.

<H3>The &quot;real&quot;, unpredictable random number generator</H3>
A random number generator. Number is returned in A. Note that BoulderDash has two random number generators. This one is a &quot;real&quot; one in that it is based on three timers. There is another one that is portable to other computers and can be seeded to give the same sequence of numbers in a pseudo-random sequence.<P>

<PRE>6E68 Random.00      LDA $DC04   ;CIA#1  Timer A  Lo byte 
6E6B                EOR $DC05   ;CIA#1  Timer A  Hi byte 
6E6E                EOR $DD04   ;CIA#2  Timer A  Lo byte 
6E71                ADC $DD05   ;CIA#2  Timer A  Hi byte 
6E74                EOR $DD06   ;CIA#2  Timer B  Lo byte 
6E77                EOR $DD07   ;CIA#2  Timer B  Hi byte 
6E7A                RTS         ;</PRE>

<H3>The predictable random number generator (for cave data)</H3>
Given RandSeed1 and RandSeed2, this routine generates the next random number in the sequence, returning the result in RandSeed2. This is the second random number generator: it is a machine portable generator that can be seeded to give a consistent sequence of pseudo-random numbers.

<PRE>void NextRandom(int *RandSeed1,int *RandSeed2)
/* This is the mathematical random number generator from the Commodore 64
   implementation of Boulder Dash I. The 6510 disassembly is given in
   comments, and the C translation follows. */
{
    short TempRand1&#59;
    short TempRand2&#59;
    short carry&#59;
    short result&#59;

/*
            7085 NextRandom.00  LDA RandSeed1
            7087                ROR
            7088                ROR
            7089                AND #$80
            708B                STA TempRand1
        
            Note: ROR on the 6510 works like this:
              7--&gt;6--&gt;5--&gt;4--&gt;3--&gt;2--&gt;1--&gt;0--&gt;C
              ^                               |
              |_______________________________|
            In other words, it's a nine-bit rotate. Thus it takes two RORs to shift
            the low bit (bit zero) into the high bit (bit 7).
*/
    TempRand1 = (*RandSeed1 &amp; 0x0001) * 0x0080&#59;   /* Bugfix! */


        /*
            708E                LDA RandSeed2
            7090                ROR
            7091                AND #$7F
            7093                STA TempRand2
        */
    TempRand2 = (*RandSeed2 &gt;&gt; 1) &amp; 0x007F&#59;


        /*
            7096                LDA RandSeed2
            7098                ROR
            7099                ROR
            709A                AND #$80
            709C                CLC
            709D                ADC RandSeed2
        */
    result = (*RandSeed2) + (*RandSeed2 &amp; 0x0001) * 0x0080&#59;
    carry = (result &gt; 0x00FF)&#59;
    result = result &amp; 0x00FF&#59;


        /*
            709F                ADC #$13
            70A1                STA RandSeed2
        */
    result = result + carry + 0x13&#59;
    carry = (result &gt; 0x00FF)&#59;
    *RandSeed2 = result &amp; 0x00FF&#59;


        /*
            70A3                LDA RandSeed1
            70A5                ADC TempRand1
        */
    result = *RandSeed1 + carry + TempRand1&#59;
    carry = (result &gt; 0x00FF)&#59;
    result = result &amp; 0x00FF&#59;


        /*
            70A8                ADC TempRand2
            70AB                STA RandSeed1
            70AD                RTS
        */
    result = result + carry + TempRand2&#59;
    *RandSeed1 = result &amp; 0x00FF&#59;
}</PRE>


<HR>
<H2><A NAME="Strings">ASCII text strings</A></H2>
Here are the text strings embedded in the program, some used on the title screen, and others used on the status bar during game play. Most of them are 20 characters long, since they are displayed in double-width characters on a 40 column screen.<P>

<PRE>&quot;  BY PETER LIEPA    &quot; 
&quot;  WITH CHRIS GREY   &quot; 
&quot;1 PLAYER  1 JOYSTICK&quot; 
&quot; PLYR 1      PLYR 2 &quot; 
&quot; 000000 LAST 000000  000000 HIGH 000000 &quot; 
&quot; G A M E   O V E R  &quot; 
&quot;PLAYER 1: 3 MEN A,0 &quot; 
&quot;    OUT OF TIME     &quot; 
&quot; B O N U S  L I F E &quot; 
&quot; CAVE: A  LEVEL: 1  &quot; 
&quot; SPACEBAR TO RESUME &quot; 
&quot;PRESS BUTTON TO PLAY&quot;</PRE>


<HR>
<H2><A NAME="Uncovering and covering the screen">Uncovering and covering the screen</A></H2>
When a new cave begins, the cave initially starts off covered with animated steel wall, pieces of which are randomly removed to gradually show the new cave. Here's the process:

<PRE>loop 69 times
	foreach line in 1..22
		randomly choose a horizontal position on that line
		uncover that position
	end foreach 
end loop 
uncover entire screen</PRE>

During this time, the cave is actually running as normal (creatures moving around etc) I believe, and the covering wall (while it exists) is animated. The <A HREF="sounds.html#Uncover sound">uncover sound</A> is continously played, overring all other sounds.


<HR>
<H2><A NAME="Timing info">Timing info</A></H2>
<H3>Time's Running Out!</H3>
During the last 10 seconds (when the timer shows 9, 8, 7 down to 0 seconds left), a <A HREF="sounds.html#Running out of time sound">Running out of time ping</A> is played with increasing pitch indicating that time is running out.

<H3>Speed of play</H3>
In BoulderDash I, the speed of the cave is <EM>not</EM> set on a cave-by-cave basis as it is in the Construction Kit. Instead, the speed of play remains the same for any given level of difficulty, but increases with level of difficulty.<P>

The speed of play is implemented with a delay loop. Each frame, if the CaveDelay is greater than zero, BoulderDash enters a time-delay loop for 90 cycles per unit of CaveDelay (remembering that the C64 runs at 1 MHz). The actual number of frames per second will vary depending on the objects in the cave&#59; a cave full of boulders takes longer to process than a cave full of dirt.

<UL><LI>Difficulty 1: CaveDelay = 12 (1080 cycles)
<LI>Difficulty 2: CaveDelay = 6 (540 cycles)
<LI>Difficulty 3: CaveDelay = 3 (270 cycles)
<LI>Difficulty 4: CaveDelay = 1 (90 cycles)
<LI>Difficulty 5: CaveDelay = 0 (no delay)</UL>

<H3>How long is a second?</H3>
A second in BoulderDash is in fact longer than one real second. I guess this might be because of lost IRQ interrupts (BoulderDash does a lot using various IRQ interrupts, and some of BoulderDash I is not as efficiently written as it could be, and as presumably later versions were). I think I found that a second was about 64 ticks, although I can't remember if I actually timed it or whether 64 just seemed like a nicer number than 60. In any case, a game second is more than 60 ticks.


<HR>
<H2><A NAME="Finishing caves and intermissions">Finishing caves and intermissions</A></H2>
The player can begin a new game on caves A, E, I or M at any of five difficulty levels. The caves are arranged in the sequence: A, B, C, D, Intermission 1, E, F, G, H, Intermission 2, I, J, K, L, Intermission 3, M, N, O, P, Intermission 4. Thus the only way to get to an intermission (bonus life screen) is to complete the four caves preceding it. Note that whether or not the player succeeds in completing the intermission successfully, play continues with the cave that follows. Note also that if the player dies in the intermission, they do <EM>not</EM> lose a life.<P>

When a player completes intermission 4, they are transported back to Cave A, but with an increased difficulty level. If the player finishes intermission 4 on difficulty level 5, they are transported back to Cave A at difficulty level 5 (again). There is no end of game sequence.


<HR>
<ADDRESS>Web page design by <A HREF="mailto:peterb@perth.dialix.oz.au">Peter Broadribb &lt;peterb@perth.dialix.oz.au&gt;</A></ADDRESS>
</BODY>
</HTML>
